{
  "ROUTE":{
    "sequencer":{
        "start": "offset",
        "end": "offset + 1 * clock_period"
    },
    "noc":{
        "start": "offset",
        "end": "offset + (horizontal_hops + vertical_hops + 3) * clock_period"
    },
    "dimarch":{
        "start": "offset + (horizontal_hops + vertical_hops) * clock_period",
        "end":   "offset + (horizontal_hops + vertical_hops) * clock_period + 1 * clock_period"
    },
    "shadow_reg":{
        "start": "offset",
        "end": "offset + 1 * clock_period"
    },
    "bus_selector":{
        "start": "offset",
        "end": "offset + 3 * clock_period"
    }
},
  "SRAM":{
   "sequencer":{
       "start": "offset",
       "end": "offset + 1 * clock_period"
   },
   "wait":{
       "start": "offset + 1 * clock_period",
       "end": "offset + (hops + 2) * clock_period"
   },
   "dimarch_agu":{
       "start": "offset + (hops + 1) * clock_period",
       "end":   "offset + (hops + 1) * clock_period + (l2_iter + 1) * (l1_iter + 1) * clock_period + 3 * clock_period"
   },
   "sram":{
       "start": "offset + 3 * clock_period + hops * clock_period",
       "end":   "offset + 3 * clock_period + hops * clock_period + (l2_iter + 1) * (l1_iter + 1) * clock_period + 1 * clock_period"
   },
   "dimarch":{
       "start": "offset",
       "end": "offset + (l2_iter + 1) * (l1_iter + 1) * clock_period + 6 * clock_period"
   },
    "shadow_reg":{
        "start": "offset",
        "end": "offset + 2 * clock_period"
    },
    "dimarch_data_in":{
       "start": "offset + (hops + 5) * clock_period",
       "end": "offset + (hops + 8) * clock_period"
    },
    "dimarch_data_in_out_reg":{
       "start": "offset + (hops + 6) * clock_period",
       "end":   "offset + (hops + 6) * clock_period + (l2_iter + 1) * (l1_iter + 1) * clock_period + 1 * clock_period"
    }
  },
  "REFI":{
      "sequencer":{
          "start": "offset",
          "end": "offset + 1 * clock_period"
      },
      "wait":{
          "start": "offset + 1 * clock_period",
          "end": "offset + (init_delay - 2) * clock_period"
      },
      "regfile":{
          "start": "offset",
          "end": "offset + init_delay * clock_period + (l2_iter + 1) * (l1_iter + 1 + l1_iter * l1_delay) * clock_period  + (l2_iter * l2_delay) * clock_period + 1 * clock_period"
      }
  },
  "SWB":{
        "sequencer":{
            "start": "offset",
            "end": "offset + 1 * clock_period"
        },
        "config_swb":{
            "start": "offset",
            "end": "offset + 1 * clock_period"
        },
        "shadow_reg":{
            "start": "offset",
            "end": "offset + 1 * clock_period"
        }
    },
  "RACCU":{
      "sequencer":{
          "start": "offset",
          "end": "offset + 1 * clock_period"
      },
      "raccu":{
          "start": "offset - 2 * clock_period",
          "end":   "offset - 2 * clock_period +  (no_of_loop_instructions + 1 ) * clock_period"
      }
  },
  "DPU":{
      "sequencer":{
          "start": "offset",
          "end": "offset + 1 * clock_period"
      },
      "dpu":{
          "start": "offset",
          "end": "offset + dpu_delay * clock_period + 3 * clock_period"
      },
      "swb":{
          "start": "offset + 1 * clock_period",
          "end": "offset + 3* clock_period + swb_delay * clock_period"
      },
        "shadow_reg":{
            "start": "offset",
            "end": "offset + 2 * clock_period"
        }
  },
  "LOOP":{
      "sequencer":{
          "start": "offset",
          "end": "offset + 1 * clock_period"
      }
  },
  "WAIT":{
      "sequencer":{
          "start": "offset",
          "end": "offset + (cycle + 1) * clock_period"
      }
  },
  "HALT":{
      "sequencer":{
          "start": "offset",
          "end": "offset + 1 * clock_period"
      }
  }

}
